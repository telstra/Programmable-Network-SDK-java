/*
 * Telstra Programmable Network API
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package TelstraTPN;

import invalidPackageName.ApiException;
import TelstraTPN.Model100InventoryEndpointResponse;
import TelstraTPN.Model100InventoryEndpointsCustomeruuidResponse;
import TelstraTPN.Model100InventoryRegularendpointRequest;
import TelstraTPN.Model100InventoryRegularendpointResponse;
import TelstraTPN.Model100InventoryVnfendpointRequest;
import TelstraTPN.Model100InventoryVnfendpointResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EndpointsApi
 */
@Ignore
public class EndpointsApiTest {

    private final EndpointsApi api = new EndpointsApi();

    
    /**
     * Create Physical (Port) Endpoint
     *
     * Create Physical (Port) Endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPhysicalPortEndpointTest() throws ApiException {
        Model100InventoryRegularendpointRequest body = null;
        Model100InventoryRegularendpointResponse response = api.createPhysicalPortEndpoint(body);

        // TODO: test validations
    }
    
    /**
     * Create VNF Endpoint
     *
     * Create VNF Endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVNFEndpointTest() throws ApiException {
        Model100InventoryVnfendpointRequest body = null;
        Model100InventoryVnfendpointResponse response = api.createVNFEndpoint(body);

        // TODO: test validations
    }
    
    /**
     * Get information about the specified endpoint
     *
     * Get information about the specified endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInformationAboutTheSpecifiedEndpointTest() throws ApiException {
        String endpointuuid = null;
        Model100InventoryEndpointResponse response = api.getInformationAboutTheSpecifiedEndpoint(endpointuuid);

        // TODO: test validations
    }
    
    /**
     * Get list of endpoints for a customer
     *
     * Get list of endpoints for a customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfEndpointsForACustomerTest() throws ApiException {
        String customeruuid = null;
        Model100InventoryEndpointsCustomeruuidResponse response = api.getListOfEndpointsForACustomer(customeruuid);

        // TODO: test validations
    }
    
}
