/*
 * Telstra Programmable Network API
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package TelstraTPN;

import invalidPackageName.ApiException;
import TelstraTPN.Link;
import TelstraTPN.Model100InventoryLinkRequest;
import TelstraTPN.Model100InventoryLinkResponse;
import TelstraTPN.Model100InventoryLinksHistoryResponse;
import TelstraTPN.Model100InventoryLinksResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LinksApi
 */
@Ignore
public class LinksApiTest {

    private final LinksApi api = new LinksApi();

    
    /**
     * Create Link and initial Contract
     *
     * Create Link and initial Contract
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLinkAndInitialContractTest() throws ApiException {
        Model100InventoryLinkRequest body = null;
        Model100InventoryLinkResponse response = api.createLinkAndInitialContract(body);

        // TODO: test validations
    }
    
    /**
     * Get active Links
     *
     * Get active Links
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getActiveLinksTest() throws ApiException {
        String customeruuid = null;
        List<Link> response = api.getActiveLinks(customeruuid);

        // TODO: test validations
    }
    
    /**
     * Get details of specified link
     *
     * Get details of specified link
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDetailsOfSpecifiedLinkTest() throws ApiException {
        String linkid = null;
        Model100InventoryLinksResponse response = api.getDetailsOfSpecifiedLink(linkid);

        // TODO: test validations
    }
    
    /**
     * Get Link history
     *
     * Get Link history
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLinkHistoryTest() throws ApiException {
        String linkid = null;
        Model100InventoryLinksHistoryResponse response = api.getLinkHistory(linkid);

        // TODO: test validations
    }
    
}
