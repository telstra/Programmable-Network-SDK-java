/*
 * Telstra Programmable Network API
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package TelstraTPN;

import invalidPackageName.ApiException;
import TelstraTPN.EndpointPort;
import TelstraTPN.Model100InventoryRegularvportRequest;
import TelstraTPN.Model100InventoryRegularvportResponse;
import TelstraTPN.Model100InventoryVnfVportRequest;
import TelstraTPN.Model100InventoryVnfVportResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VportsApi
 */
@Ignore
public class VportsApiTest {

    private final VportsApi api = new VportsApi();

    
    /**
     * Create VNF VPort
     *
     * Create VNF VPort
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVNFVPortTest() throws ApiException {
        Model100InventoryVnfVportRequest body = null;
        Model100InventoryVnfVportResponse response = api.createVNFVPort(body);

        // TODO: test validations
    }
    
    /**
     * Create VPort for physical endpoint
     *
     * Create VPort representing a VLAN on a Physical Ethernet Port
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVPortForPhysicalEndpointTest() throws ApiException {
        Model100InventoryRegularvportRequest body = null;
        Model100InventoryRegularvportResponse response = api.createVPortForPhysicalEndpoint(body);

        // TODO: test validations
    }
    
    /**
     * Get information about the specified VPort
     *
     * Get information about the specified VPort
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInformationAboutTheSpecifiedVPortTest() throws ApiException {
        String vportuuid = null;
        EndpointPort response = api.getInformationAboutTheSpecifiedVPort(vportuuid);

        // TODO: test validations
    }
    
}
