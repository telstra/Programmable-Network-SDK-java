/*
 * Telstra Programmable Network API
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package TelstraTPN;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import TelstraTPN.Topology;
import TelstraTPN.Ttms100TopologyTagObjectsResponse;
import TelstraTPN.Ttms100TopologyTagRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopologiesApi {
    private ApiClient apiClient;

    public TopologiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopologiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createANamedTopologyTag
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createANamedTopologyTagCall(Ttms100TopologyTagRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/ttms/1.0.0/topology_tag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createANamedTopologyTagValidateBeforeCall(Ttms100TopologyTagRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = createANamedTopologyTagCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a named topology tag
     * Create a named topology tag
     * @param body  (optional)
     * @return Topology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topology createANamedTopologyTag(Ttms100TopologyTagRequest body) throws ApiException {
        ApiResponse<Topology> resp = createANamedTopologyTagWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a named topology tag
     * Create a named topology tag
     * @param body  (optional)
     * @return ApiResponse&lt;Topology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topology> createANamedTopologyTagWithHttpInfo(Ttms100TopologyTagRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createANamedTopologyTagValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a named topology tag (asynchronously)
     * Create a named topology tag
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createANamedTopologyTagAsync(Ttms100TopologyTagRequest body, final ApiCallback<Topology> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createANamedTopologyTagValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInformationAboutTheSpecifiedTopologyTag
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInformationAboutTheSpecifiedTopologyTagCall(String topotaguuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ttms/1.0.0/topology_tag/{topotaguuid}/"
            .replaceAll("\\{" + "topotaguuid" + "\\}", apiClient.escapeString(topotaguuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInformationAboutTheSpecifiedTopologyTagValidateBeforeCall(String topotaguuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topotaguuid' is set
        if (topotaguuid == null) {
            throw new ApiException("Missing the required parameter 'topotaguuid' when calling getInformationAboutTheSpecifiedTopologyTag(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getInformationAboutTheSpecifiedTopologyTagCall(topotaguuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get information about the specified topology tag
     * Get information about the specified topology tag
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @return Topology
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Topology getInformationAboutTheSpecifiedTopologyTag(String topotaguuid) throws ApiException {
        ApiResponse<Topology> resp = getInformationAboutTheSpecifiedTopologyTagWithHttpInfo(topotaguuid);
        return resp.getData();
    }

    /**
     * Get information about the specified topology tag
     * Get information about the specified topology tag
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @return ApiResponse&lt;Topology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Topology> getInformationAboutTheSpecifiedTopologyTagWithHttpInfo(String topotaguuid) throws ApiException {
        com.squareup.okhttp.Call call = getInformationAboutTheSpecifiedTopologyTagValidateBeforeCall(topotaguuid, null, null);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get information about the specified topology tag (asynchronously)
     * Get information about the specified topology tag
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInformationAboutTheSpecifiedTopologyTagAsync(String topotaguuid, final ApiCallback<Topology> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInformationAboutTheSpecifiedTopologyTagValidateBeforeCall(topotaguuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Topology>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAllTopologyTags
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listAllTopologyTagsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ttms/1.0.0/topology_tag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listAllTopologyTagsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = listAllTopologyTagsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all topology tags
     * List all topology tags
     * @return List&lt;Topology&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Topology> listAllTopologyTags() throws ApiException {
        ApiResponse<List<Topology>> resp = listAllTopologyTagsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all topology tags
     * List all topology tags
     * @return ApiResponse&lt;List&lt;Topology&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Topology>> listAllTopologyTagsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listAllTopologyTagsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Topology>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all topology tags (asynchronously)
     * List all topology tags
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listAllTopologyTagsAsync(final ApiCallback<List<Topology>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listAllTopologyTagsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Topology>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listObjectsForTopology
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listObjectsForTopologyCall(String topotaguuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ttms/1.0.0/topology_tag/{topotaguuid}/objects/"
            .replaceAll("\\{" + "topotaguuid" + "\\}", apiClient.escapeString(topotaguuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listObjectsForTopologyValidateBeforeCall(String topotaguuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'topotaguuid' is set
        if (topotaguuid == null) {
            throw new ApiException("Missing the required parameter 'topotaguuid' when calling listObjectsForTopology(Async)");
        }
        
        
        com.squareup.okhttp.Call call = listObjectsForTopologyCall(topotaguuid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List objects for Topology
     * List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @return Ttms100TopologyTagObjectsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Ttms100TopologyTagObjectsResponse listObjectsForTopology(String topotaguuid) throws ApiException {
        ApiResponse<Ttms100TopologyTagObjectsResponse> resp = listObjectsForTopologyWithHttpInfo(topotaguuid);
        return resp.getData();
    }

    /**
     * List objects for Topology
     * List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @return ApiResponse&lt;Ttms100TopologyTagObjectsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Ttms100TopologyTagObjectsResponse> listObjectsForTopologyWithHttpInfo(String topotaguuid) throws ApiException {
        com.squareup.okhttp.Call call = listObjectsForTopologyValidateBeforeCall(topotaguuid, null, null);
        Type localVarReturnType = new TypeToken<Ttms100TopologyTagObjectsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List objects for Topology (asynchronously)
     * List all objects (Endpoints, Links, VPorts, etc.) associated with the topology tag.
     * @param topotaguuid Unique identifier representing a specific topology tag (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listObjectsForTopologyAsync(String topotaguuid, final ApiCallback<Ttms100TopologyTagObjectsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listObjectsForTopologyValidateBeforeCall(topotaguuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Ttms100TopologyTagObjectsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
