/*
 * Telstra Programmable Network API
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package TelstraTPN;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import TelstraTPN.Model100InventoryLinksContractRequest;
import TelstraTPN.Model100InventoryLinksContractRequest35;
import TelstraTPN.Model100InventoryLinksContractResponse;
import TelstraTPN.Model100InventoryLinksContractResponse31;
import TelstraTPN.Model100InventoryLinksContractResponse36;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContractsApi {
    private ApiClient apiClient;

    public ContractsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContractsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createNewContractOnSpecifiedLink
     * @param linkid Unique identifier representing a specific link (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNewContractOnSpecifiedLinkCall(String linkid, Model100InventoryLinksContractRequest35 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/1.0.0/inventory/links/{linkid}/contract"
            .replaceAll("\\{" + "linkid" + "\\}", apiClient.escapeString(linkid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNewContractOnSpecifiedLinkValidateBeforeCall(String linkid, Model100InventoryLinksContractRequest35 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkid' is set
        if (linkid == null) {
            throw new ApiException("Missing the required parameter 'linkid' when calling createNewContractOnSpecifiedLink(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createNewContractOnSpecifiedLinkCall(linkid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new Contract on specified link
     * Create new Contract on specified link
     * @param linkid Unique identifier representing a specific link (required)
     * @param body  (optional)
     * @return Model100InventoryLinksContractResponse36
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Model100InventoryLinksContractResponse36 createNewContractOnSpecifiedLink(String linkid, Model100InventoryLinksContractRequest35 body) throws ApiException {
        ApiResponse<Model100InventoryLinksContractResponse36> resp = createNewContractOnSpecifiedLinkWithHttpInfo(linkid, body);
        return resp.getData();
    }

    /**
     * Create new Contract on specified link
     * Create new Contract on specified link
     * @param linkid Unique identifier representing a specific link (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Model100InventoryLinksContractResponse36&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Model100InventoryLinksContractResponse36> createNewContractOnSpecifiedLinkWithHttpInfo(String linkid, Model100InventoryLinksContractRequest35 body) throws ApiException {
        com.squareup.okhttp.Call call = createNewContractOnSpecifiedLinkValidateBeforeCall(linkid, body, null, null);
        Type localVarReturnType = new TypeToken<Model100InventoryLinksContractResponse36>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new Contract on specified link (asynchronously)
     * Create new Contract on specified link
     * @param linkid Unique identifier representing a specific link (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNewContractOnSpecifiedLinkAsync(String linkid, Model100InventoryLinksContractRequest35 body, final ApiCallback<Model100InventoryLinksContractResponse36> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNewContractOnSpecifiedLinkValidateBeforeCall(linkid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Model100InventoryLinksContractResponse36>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getActiveContractByContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getActiveContractByContractIDCall(String linkid, String contractid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/1.0.0/inventory/links/{linkid}/contract/{contractid}"
            .replaceAll("\\{" + "linkid" + "\\}", apiClient.escapeString(linkid.toString()))
            .replaceAll("\\{" + "contractid" + "\\}", apiClient.escapeString(contractid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getActiveContractByContractIDValidateBeforeCall(String linkid, String contractid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkid' is set
        if (linkid == null) {
            throw new ApiException("Missing the required parameter 'linkid' when calling getActiveContractByContractID(Async)");
        }
        
        // verify the required parameter 'contractid' is set
        if (contractid == null) {
            throw new ApiException("Missing the required parameter 'contractid' when calling getActiveContractByContractID(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getActiveContractByContractIDCall(linkid, contractid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get active Contract by ContractID
     * Get active Contract by ContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @return Model100InventoryLinksContractResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Model100InventoryLinksContractResponse getActiveContractByContractID(String linkid, String contractid) throws ApiException {
        ApiResponse<Model100InventoryLinksContractResponse> resp = getActiveContractByContractIDWithHttpInfo(linkid, contractid);
        return resp.getData();
    }

    /**
     * Get active Contract by ContractID
     * Get active Contract by ContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @return ApiResponse&lt;Model100InventoryLinksContractResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Model100InventoryLinksContractResponse> getActiveContractByContractIDWithHttpInfo(String linkid, String contractid) throws ApiException {
        com.squareup.okhttp.Call call = getActiveContractByContractIDValidateBeforeCall(linkid, contractid, null, null);
        Type localVarReturnType = new TypeToken<Model100InventoryLinksContractResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get active Contract by ContractID (asynchronously)
     * Get active Contract by ContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getActiveContractByContractIDAsync(String linkid, String contractid, final ApiCallback<Model100InventoryLinksContractResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getActiveContractByContractIDValidateBeforeCall(linkid, contractid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Model100InventoryLinksContractResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateActiveContractByContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateActiveContractByContractIDCall(String linkid, String contractid, Model100InventoryLinksContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/1.0.0/inventory/links/{linkid}/contract/{contractid}"
            .replaceAll("\\{" + "linkid" + "\\}", apiClient.escapeString(linkid.toString()))
            .replaceAll("\\{" + "contractid" + "\\}", apiClient.escapeString(contractid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateActiveContractByContractIDValidateBeforeCall(String linkid, String contractid, Model100InventoryLinksContractRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkid' is set
        if (linkid == null) {
            throw new ApiException("Missing the required parameter 'linkid' when calling updateActiveContractByContractID(Async)");
        }
        
        // verify the required parameter 'contractid' is set
        if (contractid == null) {
            throw new ApiException("Missing the required parameter 'contractid' when calling updateActiveContractByContractID(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updateActiveContractByContractIDCall(linkid, contractid, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update active Contract by ContractID
     * Update active Contract by ContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @param body  (optional)
     * @return Model100InventoryLinksContractResponse31
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Model100InventoryLinksContractResponse31 updateActiveContractByContractID(String linkid, String contractid, Model100InventoryLinksContractRequest body) throws ApiException {
        ApiResponse<Model100InventoryLinksContractResponse31> resp = updateActiveContractByContractIDWithHttpInfo(linkid, contractid, body);
        return resp.getData();
    }

    /**
     * Update active Contract by ContractID
     * Update active Contract by ContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Model100InventoryLinksContractResponse31&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Model100InventoryLinksContractResponse31> updateActiveContractByContractIDWithHttpInfo(String linkid, String contractid, Model100InventoryLinksContractRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateActiveContractByContractIDValidateBeforeCall(linkid, contractid, body, null, null);
        Type localVarReturnType = new TypeToken<Model100InventoryLinksContractResponse31>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update active Contract by ContractID (asynchronously)
     * Update active Contract by ContractID
     * @param linkid Unique identifier representing a specific link (required)
     * @param contractid Unique identifier representing a specific contract (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateActiveContractByContractIDAsync(String linkid, String contractid, Model100InventoryLinksContractRequest body, final ApiCallback<Model100InventoryLinksContractResponse31> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateActiveContractByContractIDValidateBeforeCall(linkid, contractid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Model100InventoryLinksContractResponse31>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
